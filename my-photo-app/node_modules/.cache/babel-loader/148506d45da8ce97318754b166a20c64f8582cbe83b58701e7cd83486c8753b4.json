{"ast":null,"code":"var e = require(\"convert-css-length\"),\n  n = require(\"parse-unit\"),\n  t = function (e) {\n    return n(e)[1];\n  },\n  i = function (e) {\n    return n(e)[0];\n  },\n  r = {\n    baseFontSize: \"16px\",\n    baseLineHeight: 1.5,\n    rhythmUnit: \"rem\",\n    defaultRhythmBorderWidth: \"1px\",\n    defaultRhythmBorderStyle: \"solid\",\n    roundToNearestHalfLine: !0,\n    minLinePadding: \"2px\"\n  },\n  a = function (n, t) {\n    var r,\n      a = e(t.baseFontSize),\n      o = i(a(n, \"px\")),\n      s = i(t.baseLineHeightInPx),\n      u = i(a(t.minLinePadding, \"px\"));\n    return (r = t.roundToNearestHalfLine ? Math.ceil(2 * o / s) / 2 : Math.ceil(o / s)) * s - o < 2 * u && (r += t.roundToNearestHalfLine ? .5 : 1), r;\n  },\n  o = function (n) {\n    var r = e(n.baseFontSize);\n    return function (e, a, o) {\n      null == e && (e = 1), null == a && (a = n.baseFontSize), null == o && (o = 0);\n      var s = e * i(n.baseLineHeightInPx) - o + \"px\",\n        u = r(s, n.rhythmUnit, a);\n      return \"px\" === t(u) && (u = Math.floor(i(u)) + t(u)), parseFloat(i(u).toFixed(5)) + t(u);\n    };\n  };\nmodule.exports = function (n) {\n  var s = JSON.parse(JSON.stringify(r)),\n    u = Object.assign({}, s, n),\n    h = e(u.baseFontSize);\n  if (t(u.baseLineHeight)) {\n    i(h(u.baseFontSize, \"px\"));\n    u.baseLineHeightInPx = h(u.baseLineHeight, \"px\");\n  } else u.baseLineHeightInPx = i(u.baseFontSize) * u.baseLineHeight + \"px\";\n  return {\n    rhythm: o(u),\n    establishBaseline: function () {\n      return function (n) {\n        e(n.baseFontSize);\n        return {\n          fontSize: i(n.baseFontSize) / 16 * 100 + \"%\",\n          lineHeight: n.baseLineHeight.toString()\n        };\n      }(u);\n    },\n    linesForFontSize: function (e) {\n      return a(e, u);\n    },\n    adjustFontSizeTo: function (n, r, s) {\n      return null == r && (r = \"auto\"), function (n, r, s, u) {\n        null == s && (s = u.baseFontSize), \"%\" === t(n) && (n = i(u.baseFontSize) * (i(n) / 100) + \"px\");\n        var h = e(u.baseFontSize);\n        n = h(n, \"px\", s = h(s, \"px\"));\n        var l = o(u);\n        return \"auto\" === r && (r = a(n, u)), {\n          fontSize: h(n, u.rhythmUnit, s),\n          lineHeight: l(r, s)\n        };\n      }(n, r, s, u);\n    }\n  };\n};","map":{"version":3,"names":["e","require","n","t","i","r","baseFontSize","baseLineHeight","rhythmUnit","defaultRhythmBorderWidth","defaultRhythmBorderStyle","roundToNearestHalfLine","minLinePadding","a","linesForFontSize","o","s","baseLineHeightInPx","u","Math","ceil","rhythm","floor","parseFloat","toFixed","module","exports","JSON","parse","stringify","Object","assign","h","establishBaseline","fontSize","lineHeight","toString","adjustFontSizeTo","l"],"sources":["/mnt/c/Users/Andrei.Miclea/Desktop/photo/my-photo-app/node_modules/compass-vertical-rhythm/src/index.js"],"sourcesContent":["const convertLength = require(\"convert-css-length\")\nconst parseUnit = require(\"parse-unit\")\n\nconst unit = length => parseUnit(length)[1]\n\nconst unitLess = length => parseUnit(length)[0]\n\nconst defaults = {\n  baseFontSize: \"16px\",\n  baseLineHeight: 1.5,\n  rhythmUnit: \"rem\",\n  defaultRhythmBorderWidth: \"1px\",\n  defaultRhythmBorderStyle: \"solid\",\n  roundToNearestHalfLine: true,\n  minLinePadding: \"2px\",\n}\n\nconst linesForFontSize = function(fontSize, options) {\n  let lines\n  const convert = convertLength(options.baseFontSize)\n  const fontSizeInPx = unitLess(convert(fontSize, \"px\"))\n  const lineHeightInPx = unitLess(options.baseLineHeightInPx)\n  const minLinePadding = unitLess(convert(options.minLinePadding, \"px\"))\n\n  if (options.roundToNearestHalfLine) {\n    lines = Math.ceil(2 * fontSizeInPx / lineHeightInPx) / 2\n  } else {\n    lines = Math.ceil(fontSizeInPx / lineHeightInPx)\n  }\n\n  // If lines are cramped, include some extra lead.\n  if (lines * lineHeightInPx - fontSizeInPx < minLinePadding * 2) {\n    if (options.roundToNearestHalfLine) {\n      lines += 0.5\n    } else {\n      lines += 1\n    }\n  }\n\n  return lines\n}\n\nconst rhythm = function(options) {\n  const convert = convertLength(options.baseFontSize)\n\n  return function(lines, fontSize, offset) {\n    if (lines == null) {\n      lines = 1\n    }\n    if (fontSize == null) {\n      fontSize = options.baseFontSize\n    }\n    if (offset == null) {\n      offset = 0\n    }\n    const length = lines * unitLess(options.baseLineHeightInPx) - offset + \"px\"\n    let rhythmLength = convert(length, options.rhythmUnit, fontSize)\n    if (unit(rhythmLength) === \"px\") {\n      rhythmLength = Math.floor(unitLess(rhythmLength)) + unit(rhythmLength)\n    }\n\n    // Limit to 5 decimals.\n    return parseFloat(unitLess(rhythmLength).toFixed(5)) + unit(rhythmLength)\n  }\n}\n\nconst establishBaseline = function(options) {\n  const convert = convertLength(options.baseFontSize)\n\n  // Set these values on html in your css.\n  return {\n    // 16px is the default browser font size.\n    // Set base fontsize in percent as older browsers (or just IE6) behave\n    // weird otherwise.\n    fontSize: unitLess(options.baseFontSize) / 16 * 100 + \"%\",\n    lineHeight: options.baseLineHeight.toString(),\n  }\n}\n\nconst adjustFontSizeTo = function(toSize, lines, fromSize, options) {\n  if (fromSize == null) {\n    fromSize = options.baseFontSize\n  }\n\n  if (unit(toSize) === \"%\") {\n    toSize = unitLess(options.baseFontSize) * (unitLess(toSize) / 100) + \"px\"\n  }\n\n  const convert = convertLength(options.baseFontSize)\n  fromSize = convert(fromSize, \"px\")\n  toSize = convert(toSize, \"px\", fromSize)\n  const r = rhythm(options)\n\n  if (lines === \"auto\") {\n    lines = linesForFontSize(toSize, options)\n  }\n\n  return {\n    fontSize: convert(toSize, options.rhythmUnit, fromSize),\n    lineHeight: r(lines, fromSize),\n  }\n}\n\nmodule.exports = function(options) {\n  // Don't override defaults\n  const defaultsCopy = JSON.parse(JSON.stringify(defaults))\n\n  const mergedOptions = { ...defaultsCopy, ...options }\n\n  // Backwards compatability. If baseLineHeight is in pixels, convert to unitless\n  // value. Also set line height in pixels as it's used several places.\n  const convert = convertLength(mergedOptions.baseFontSize)\n  if (unit(mergedOptions.baseLineHeight)) {\n    const fontSizeInPx = unitLess(convert(mergedOptions.baseFontSize, \"px\"))\n    mergedOptions.baseLineHeightInPx = convert(\n      mergedOptions.baseLineHeight,\n      \"px\"\n    )\n  } else {\n    mergedOptions.baseLineHeightInPx = `${unitLess(mergedOptions.baseFontSize) *\n      mergedOptions.baseLineHeight}px`\n  }\n\n  return {\n    rhythm: rhythm(mergedOptions),\n    establishBaseline() {\n      return establishBaseline(mergedOptions)\n    },\n    linesForFontSize(fontSize) {\n      return linesForFontSize(fontSize, mergedOptions)\n    },\n    adjustFontSizeTo(toSize, lines, fromSize) {\n      if (lines == null) {\n        lines = \"auto\"\n      }\n      return adjustFontSizeTo(toSize, lines, fromSize, mergedOptions)\n    },\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}