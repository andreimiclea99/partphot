{"ast":null,"code":"var e = require(\"parse-unit\"),\n  r = function (r) {\n    return e(r)[0];\n  };\nmodule.exports = function (n) {\n  return null == n && (n = n), function (u, i, t, f) {\n    null == t && (t = n), null == f && (f = t);\n    var l = function (r) {\n      return e(r)[1];\n    }(u);\n    if (l === i) return u;\n    var o = r(u);\n    if (\"px\" !== l) if (\"em\" === l) o = r(u) * r(t);else if (\"rem\" === l) o = r(u) * r(n);else {\n      if (\"ex\" !== l) return u;\n      o = r(u) * r(t) * 2;\n    }\n    var a = o;\n    if (\"px\" !== i) if (\"em\" === i) a = o / r(f);else if (\"rem\" === i) a = o / r(n);else {\n      if (\"ex\" !== i) return u;\n      a = o / r(f) / 2;\n    }\n    return parseFloat(a.toFixed(5)) + i;\n  };\n};","map":{"version":3,"names":["e","require","r","module","exports","n","u","i","t","f","l","o","a","parseFloat","toFixed"],"sources":["/mnt/c/Users/Andrei.Miclea/Desktop/photo/my-photo-app/node_modules/convert-css-length/src/index.js"],"sourcesContent":["/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n\nconst parseUnit = require(\"parse-unit\")\n\nconst baseFontSize = \"16px\"\n\n// Emulate the sass function \"unit\"\nconst unit = length => parseUnit(length)[1]\n\n// Emulate the sass function \"unitless\"\nconst unitLess = length => parseUnit(length)[0]\n\n// Convert any CSS <length> or <percentage> value to any another.\n//\n// @param length\n//   A css <length> value\n//\n// @param toUnit\n//   String matching a css unit keyword, e.g. 'em', 'rem', etc.\n//\n// @param fromContext\n//   When converting from relative units, the absolute length (in px) to\n//   which length refers (e.g. for lengths in em units, would normally be the\n//   font-size of the current element).\n//\n// @param toContext\n//   For converting to relative units, the absolute length in px to which the\n//   output value will refer. Defaults to the same as fromContext, since it is\n//   rarely needed.\nmodule.exports = function(baseFontSize) {\n  if (baseFontSize == null) {\n    baseFontSize = baseFontSize\n  }\n  return function(length, toUnit, fromContext, toContext) {\n    if (fromContext == null) {\n      fromContext = baseFontSize\n    }\n    if (toContext == null) {\n      toContext = fromContext\n    }\n    const fromUnit = unit(length)\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length\n    }\n\n    // Convert input length to pixels.\n    let pxLength = unitLess(length)\n\n    // Warn if to or from context aren't in pixels.\n    // if (unit(fromContext) !== \"px\") {\n    // console.warn(`Parameter fromContext must resolve to a value \\\n    // in pixel units.`)\n    // }\n    // if (unit(toContext) !== \"px\") {\n    // console.warn(`Parameter toContext must resolve to a value \\\n    // in pixel units.`)\n    // }\n\n    if (fromUnit !== \"px\") {\n      if (fromUnit === \"em\") {\n        pxLength = unitLess(length) * unitLess(fromContext)\n      } else if (fromUnit === \"rem\") {\n        pxLength = unitLess(length) * unitLess(baseFontSize)\n      } else if (fromUnit === \"ex\") {\n        pxLength = unitLess(length) * unitLess(fromContext) * 2\n      } else {\n        return length\n      }\n      // } else if ([\"ch\", \"vw\", \"vh\", \"vmin\"].includes(fromUnit)) {\n      // console.warn(`${fromUnit} units can't be reliably converted; Returning \\\n      // original value.`)\n      // return length\n      // } else {\n      // console.warn(`${fromUnit} is an unknown or unsupported length unit; \\\n      // Returning original value.`)\n      // return length\n      // }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength\n    if (toUnit !== \"px\") {\n      if (toUnit === \"em\") {\n        outputLength = pxLength / unitLess(toContext)\n      } else if (toUnit === \"rem\") {\n        outputLength = pxLength / unitLess(baseFontSize)\n      } else if (toUnit === \"ex\") {\n        outputLength = pxLength / unitLess(toContext) / 2\n        // } else if ([\"ch\", \"vw\", \"vh\", \"vmin\"].includes(toUnit)) {\n        // console.warn(`${toUnit} units can't be reliably converted; Returning \\\n        // original value.`)\n        // return length\n        // } else {\n        // console.warn(`${toUnit} is an unknown or unsupported length unit; \\\n        // Returning original value.`)\n      } else {\n        return length\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit\n  }\n}\n"],"mappings":"AASA,IAAMA,CAAA,GAAYC,OAAA,CAAQ;EAQpBC,CAAA,YAAAA,CAAWA,CAAA;IAAA,OAAUF,CAAA,CAAUE,CAAA,EAAQ;EAAA;AAmB7CC,MAAA,CAAOC,OAAA,GAAU,UAASC,CAAA;EAIxB,OAHoB,QAAhBA,CAAA,KACFA,CAAA,GAAeA,CAAA,GAEV,UAASC,CAAA,EAAQC,CAAA,EAAQC,CAAA,EAAaC,CAAA;IACxB,QAAfD,CAAA,KACFA,CAAA,GAAcH,CAAA,GAEC,QAAbI,CAAA,KACFA,CAAA,GAAYD,CAAA;IAEd,IAAME,CAAA,aAjCGR,CAAA;MAAA,OAAUF,CAAA,CAAUE,CAAA,EAAQ;IAAA,CAiCpB,CAAKI,CAAA;IAGtB,IAAII,CAAA,KAAaH,CAAA,EACf,OAAOD,CAAA;IAIT,IAAIK,CAAA,GAAWT,CAAA,CAASI,CAAA;IAYxB,IAAiB,SAAbI,CAAA,EACF,IAAiB,SAAbA,CAAA,EACFC,CAAA,GAAWT,CAAA,CAASI,CAAA,IAAUJ,CAAA,CAASM,CAAA,OAClC,IAAiB,UAAbE,CAAA,EACTC,CAAA,GAAWT,CAAA,CAASI,CAAA,IAAUJ,CAAA,CAASG,CAAA,OAClC;MAAA,IAAiB,SAAbK,CAAA,EAGT,OAAOJ,CAAA;MAFPK,CAAA,GAAWT,CAAA,CAASI,CAAA,IAAUJ,CAAA,CAASM,CAAA,IAAe;IAAA;IAgB1D,IAAII,CAAA,GAAeD,CAAA;IACnB,IAAe,SAAXJ,CAAA,EACF,IAAe,SAAXA,CAAA,EACFK,CAAA,GAAeD,CAAA,GAAWT,CAAA,CAASO,CAAA,OAC9B,IAAe,UAAXF,CAAA,EACTK,CAAA,GAAeD,CAAA,GAAWT,CAAA,CAASG,CAAA,OAC9B;MAAA,IAAe,SAAXE,CAAA,EAUT,OAAOD,CAAA;MATPM,CAAA,GAAeD,CAAA,GAAWT,CAAA,CAASO,CAAA,IAAa;IAAA;IAapD,OAAOI,UAAA,CAAWD,CAAA,CAAaE,OAAA,CAAQ,MAAMP,CAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}